"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
function Controller(path) {
    var middleware = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        middleware[_i - 1] = arguments[_i];
    }
    return function (target) {
        var metadata = { path: path, middleware: middleware, target: target };
        Reflect.defineMetadata(constants_1.METADATA_KEY.controller, metadata, target);
    };
}
exports.Controller = Controller;
function All(path) {
    var middleware = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        middleware[_i - 1] = arguments[_i];
    }
    return Method.apply(void 0, ["all", path].concat(middleware));
}
exports.All = All;
function Get(path) {
    var middleware = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        middleware[_i - 1] = arguments[_i];
    }
    return Method.apply(void 0, ["get", path].concat(middleware));
}
exports.Get = Get;
function Post(path) {
    var middleware = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        middleware[_i - 1] = arguments[_i];
    }
    return Method.apply(void 0, ["post", path].concat(middleware));
}
exports.Post = Post;
function Put(path) {
    var middleware = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        middleware[_i - 1] = arguments[_i];
    }
    return Method.apply(void 0, ["put", path].concat(middleware));
}
exports.Put = Put;
function Patch(path) {
    var middleware = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        middleware[_i - 1] = arguments[_i];
    }
    return Method.apply(void 0, ["patch", path].concat(middleware));
}
exports.Patch = Patch;
function Head(path) {
    var middleware = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        middleware[_i - 1] = arguments[_i];
    }
    return Method.apply(void 0, ["head", path].concat(middleware));
}
exports.Head = Head;
function Delete(path) {
    var middleware = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        middleware[_i - 1] = arguments[_i];
    }
    return Method.apply(void 0, ["delete", path].concat(middleware));
}
exports.Delete = Delete;
function Method(method, path) {
    var middleware = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        middleware[_i - 2] = arguments[_i];
    }
    return function (target, key, value) {
        var metadata = { path: path, middleware: middleware, method: method, target: target, key: key };
        var metadataList = [];
        if (!Reflect.hasOwnMetadata(constants_1.METADATA_KEY.controllerMethod, target.constructor)) {
            Reflect.defineMetadata(constants_1.METADATA_KEY.controllerMethod, metadataList, target.constructor);
        }
        else {
            metadataList = Reflect.getOwnMetadata(constants_1.METADATA_KEY.controllerMethod, target.constructor);
        }
        metadataList.push(metadata);
    };
}
exports.Method = Method;
