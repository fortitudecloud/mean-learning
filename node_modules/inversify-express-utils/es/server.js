import * as express from "express";
import { TYPE, METADATA_KEY, DEFAULT_ROUTING_ROOT_PATH } from "./constants";
/**
 * Wrapper for the express server.
 */
var InversifyExpressServer = (function () {
    /**
     * Wrapper for the express server.
     *
     * @param container Container loaded with all controllers and their dependencies.
     */
    function InversifyExpressServer(container, customRouter, routingConfig, customApp) {
        this._container = container;
        this._router = customRouter || express.Router();
        this._routingConfig = routingConfig || {
            rootPath: DEFAULT_ROUTING_ROOT_PATH
        };
        this._app = customApp || express();
    }
    /**
     * Sets the configuration function to be applied to the application.
     * Note that the config function is not actually executed until a call to InversifyExpresServer.build().
     *
     * This method is chainable.
     *
     * @param fn Function in which app-level middleware can be registered.
     */
    InversifyExpressServer.prototype.setConfig = function (fn) {
        this._configFn = fn;
        return this;
    };
    /**
     * Sets the error handler configuration function to be applied to the application.
     * Note that the error config function is not actually executed until a call to InversifyExpresServer.build().
     *
     * This method is chainable.
     *
     * @param fn Function in which app-level error handlers can be registered.
     */
    InversifyExpressServer.prototype.setErrorConfig = function (fn) {
        this._errorConfigFn = fn;
        return this;
    };
    /**
     * Applies all routes and configuration to the server, returning the express application.
     */
    InversifyExpressServer.prototype.build = function () {
        // register server-level middleware before anything else
        if (this._configFn) {
            this._configFn.apply(undefined, [this._app]);
        }
        this.registerControllers();
        // register error handlers after controllers
        if (this._errorConfigFn) {
            this._errorConfigFn.apply(undefined, [this._app]);
        }
        return this._app;
    };
    InversifyExpressServer.prototype.registerControllers = function () {
        var _this = this;
        var controllers = this._container.getAll(TYPE.Controller);
        controllers.forEach(function (controller) {
            var controllerMetadata = Reflect.getOwnMetadata(METADATA_KEY.controller, controller.constructor);
            var methodMetadata = Reflect.getOwnMetadata(METADATA_KEY.controllerMethod, controller.constructor);
            if (controllerMetadata && methodMetadata) {
                var router = express.Router();
                var controllerMiddleware_1 = _this.resolveMidleware.apply(_this, controllerMetadata.middleware);
                methodMetadata.forEach(function (metadata) {
                    var handler = _this.handlerFactory(controllerMetadata.target.name, metadata.key);
                    var routeMiddleware = _this.resolveMidleware.apply(_this, metadata.middleware);
                    (_a = _this._router)[metadata.method].apply(_a, ["" + controllerMetadata.path + metadata.path].concat(controllerMiddleware_1, routeMiddleware, [handler]));
                    var _a;
                });
            }
        });
        this._app.use(this._routingConfig.rootPath, this._router);
    };
    InversifyExpressServer.prototype.resolveMidleware = function () {
        var _this = this;
        var middleware = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middleware[_i] = arguments[_i];
        }
        return middleware.map(function (middlewareItem) {
            try {
                return _this._container.get(middlewareItem);
            }
            catch (_) {
                return middlewareItem;
            }
        });
    };
    InversifyExpressServer.prototype.handlerFactory = function (controllerName, key) {
        var _this = this;
        return function (req, res, next) {
            var result = _this._container.getNamed(TYPE.Controller, controllerName)[key](req, res, next);
            // try to resolve promise
            if (result && result instanceof Promise) {
                result.then(function (value) {
                    if (value && !res.headersSent) {
                        res.send(value);
                    }
                })
                    .catch(function (error) {
                    next(error);
                });
            }
            else if (result && !res.headersSent) {
                res.send(result);
            }
        };
    };
    return InversifyExpressServer;
}());
export { InversifyExpressServer };
